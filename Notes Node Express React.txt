----------1st Day of Abhishek Purohit call back function ------------

javascript: to execute logics on the website

variables, if else , loops, arrays, operators, functions

var let const

function show(){
		var x=7;

}

var: local as well as global
let: block scoped
const: 


callback functions

1. For javascript everything is an object 
   number, string, bool, array, json, web page, window 
   * : we can assign any object into any variable

   a=[1,2,3,4,5,6]
   b={id:101,name:'anuj',phone:'888111'}

	note: functions are also considered as objects 
   function show(){
                console.log("hello world!");
                return 5;
            }

            var a=show;
            console.log(a);
            a();

> a function that is passed inside the argument of some another
  function is known as callback function

function show(x){
                console.log("hello world!");
                x();
            }
            function greet(){
                console.log("good morning....");
            }

            show(greet);

in above example greet will be referred as callback function



> scenario:
  we have a function that has to be passed inside the argument
  then there is no need to give that function a name
  and that function without name is an anonymous function 
  function show(x){
                console.log("hello world!");
                x();
            }
            
            

            show(function(){
                console.log("good morning....");
            })

var myFun=function(){
                console.log("good morning....");
            }
            myFun();



var a=[10,23,4,6,7,8,9,11,14];
            a.forEach(function(item,i){
                if (item%2==0) {
                    console.log(item,i);
                }
                
            });
// forEach function will pick an array element and assign the value
// in 1st arg and 2nd argument will be assigned by index number

var a=[10,23,4,6,7,8,9,11,14];
            
          // filter out even numbers from array 
          var b=a.filter(function(item){
                return item%2==0;
          });
          console.log(b);
          // inside filter function call we have to pass a callback function
          // as argument and that callback function should return
          // either true or false
          // based on true or false elements will be filtered
          // after filtering is done filter function will return a new array
          // that array will contain only filtered elements
// in js latest version there is one more way to define
        // anonymous function and that is arrow function
        function(){
            // regular function
        }

        ()=>{
			// arrow function
        }

var add=(a,b)=>{
            return a+b;
        }
        
        var c=add(7,4);
        console.log(c);

note: if arrow function is having only a single argument
then we can remove paranthesis 

var add = a =>{
            return a+5;
        }
        
        var c=add(3);
        console.log(c);

scenario:
inside arrow function if there is single statement
and that is too a return statement 
> note: we can remove return keyword and we can remove the braces
also

var add = a => a+5;
        
        var c=add(3);
        console.log(c);

var add = (a,b) => a+b;
        
        var c=add(3,9);
        console.log(c);


var obj1={
                a:1,
                obj2:{
                    a:2,
                    show:()=>{
                        console.log(this);
                    }
                }
           }

           obj1.obj2.show();

        // regular function will have its own this 
        // arrow function will not have its own this
        // inside arrow function this keyword will refer to window object


Node Js
> node js is a javascript runtime environment 

.html 
browser: js engine
google chrome: v8 engine

node js is going to run js programs 

using node js we can create our server 




two ways to perform operations in js:
1. synchronous: blocking nature 
   p1 6 sec 
   p2 10 sec
	p3  4 sec
    
2. asynchronous: non blocking nature

   p1  6 sec thread
   p2  10 sec thread
   p3  4 sec  thread

   c=sum(3,5)
	f=factorial(6)
   power(9,3)

   callback functions are required to make any process asynchronous 
   function factorial(n) {
    var f=1;
    for (var i=1; i<=n; i++) {
        f=f*i;
    }
    console.log(f);
}

function sum(a,b){
    console.log("inside sum");
    var sum=a+b;
    console.log(sum);
}
// we want to make an illusion that this function is taking 3 seconds to
// execute

console.log("calculating factorial....");
setTimeout(factorial,3000,5);
setTimeout(sum,4000,5,8);
console.log("after calculating factorial");


note: to make multiple process dependent on each other we need to nest callback functions
into one another 
setTimeout(()=>{
			setTimeout(()=>{
			
			},2000);
},3000)

setTimeout(() => {
    var a=2;
    var b=4;
    var c = a+b;
    console.log("sum is", c);
    setTimeout(() => {
        var f = 1;
        for (var i = 1; i <= c; i++) {
            f = f * i;
        }
        console.log("factorial is", f);
    }, 2000);
}, 4000);
 
----------------------------2nd day Solution for call back hell Promise and Ajax---------------------------------------

callback hell
Promise has been introduced to avoid callback hell 

eg: You have made a promise to your friend that tomorrow at 11am
you will give him/her a treat 

till 11 am of next day promise will be in pending state

now it is 11 am of the next 
at this same moment the promise will be executed

1. either promise has been fulfilled (if task has been successfully
completed)

2. or promise has been rejected (if there is an error while
performing any task)


Promise will have 3 states:
1. resolved
2. rejected
3. pending 


Based on promise state we can take suitable actions
p1
p2
p3


> we just have to create a promise for any task
  when we are creating a promise, its the developer's responsibility
  to resolve or to reject the promise 

> after creation we have to execute the promise

> after execution, promise state will become either resolved or rejected

> Based on promise state we can take suitable actions
  we have to handle the promise 

Student s=new Student();

return new Promise((resolve,reject)=>{
	
}); 

> note: Promise constructor will take a callback function 
as argument and that callback function will contain 
the statements that we have to execute for the promise
we need to write whole logic inside the callback function
this callback is known as promise executor function

executor function will have access to the promise states i.e.
resolve and reject 

eg: I am promising that every number is going to be an even 
number 



var evenPromise=new Promise((resolve,reject)=>{
	var n=6;
	if(n%2==0){
		resolve();
	}
	else{
		reject();
	}
});

two function to handle the promise

then() -> when promise is resolved
catch() -> when promise is rejected

var evenPromise=new Promise((resolve,reject)=>{
	var n=7;
	if(n%2==0){
		resolve();
	}
	else{
		reject();
	}
});

evenPromise
.then(()=>{
    console.log("Promise is resolved and number is even");
}).catch(()=>{
    console.log("OOOPS! Promise is rejected and number is not even");
});


function average(...x){

} 

average(5,6,7);
average(9,2);
average();

console.log(1,2)

function checkEven(n){
    return new Promise((resolve,reject)=>{
        if(n%2==0){
            resolve([10,20,30,40]);
        }
        else{
            reject("OOOPS! Promise is rejected and number is not even");
        }
    });
   
}

checkEven(7)
.then((result)=>{
    console.log(result);
}).catch((error)=>{
    console.log(error);
});





function sum(a, b) {
    return new Promise((resolve, reject) => {
        console.log("finding sum...");
        setTimeout(() => {
            resolve(a + b)
        }, 4000)
    });
}

function factorial(n) {
    return new Promise((resolve, reject) => {
        console.log("finding factorial...");
        setTimeout(() => {
            var f = 1;
            for (var i = 1; i <= n; i++) {
                f = f * i;
            }
            resolve(f);
        }, 2000);
    });
}

function cube(n){
    return new Promise((resolve,reject)=>{
        console.log("finding cube...");
        setTimeout(()=>{
            var c=n*n*n;
            resolve(c);
        }, 3000);
    });
}
sum(2,4)
.then((c) => {
    console.log("sum is", c);
    return factorial(c);
})
.then((f)=>{
    console.log("factorial is", f);
    return cube(f);
})
.then((cubeValue)=>{
    console.log("cube is", cubeValue);
})
.catch((error)=>{
    console.log(error);
});


read data from database -> async
write that data into a file -> async
send a successful response

fetchData()
.then((data)=>{
	return writeFile(data);	
})
.then(()=>{
	sendResponse();
})

fetch()



there are two ways to handle the promise:
1. then() catch()
2. async await: async and await are the keywords 
   > await keyword must be placed inside a function body
     (we can't write await keyword outside any function body) 
   


function sum(a, b) {
    return new Promise((resolve, reject) => {
        console.log("finding sum...");
        setTimeout(() => {
            resolve(a + b)
        }, 4000)
    });
}

function factorial(n) {
    return new Promise((resolve, reject) => {
        console.log("finding factorial...");
        setTimeout(() => {
            var f = 1;
            for (var i = 1; i <= n; i++) {
                f = f * i;
            }
            resolve(f);
        }, 2000);
    });
}

function cube(n){
    return new Promise((resolve,reject)=>{
        console.log("finding cube...");
        setTimeout(()=>{
            var c=n*n*n;
            resolve(c);
        }, 3000);
    });
}
async function handlePromise(){
    try {
        var result=await sum(2,4);// await will return the value which is passed inside the resolve
        console.log("sum is",result);
        var f=await factorial(result);
        console.log("factorial is",f);
        var c=await cube(f);
        console.log("cube is",c);
    } catch (error) {
        console.log(error);
    }
}
handlePromise();
// sum(2,4)
// .then((c) => {
//     console.log("sum is", c);
//     return factorial(c);
// })
// .then((f)=>{
//     console.log("factorial is", f);
//     return cube(f);
// })
// .then((cubeValue)=>{
//     console.log("cube is", cubeValue);
// })
// .catch((error)=>{
//     console.log(error);
// });




Promise.all()
Promise.any()
Promise.race()




AJAX:
process using which we can send a request and get a response
from a server asynchronously 

1. create an object of XMLHttpRequest
	var xhr=new XMLHttpRequest()


2. initialize the request 
	mention the url
	mention the request method 
   GET POST PUT DELETE 
	
	xhr.open(method,url)

3. send the request
   xhr.send()

4. get response from the server

to recognize the current state of the request 
readyState property of xhr object has been introduced
readyState will be an integer


https://www.tutorialrepublic.com/javascript-tutorial/javascript-ajax.php

----------------------------3rd day Introduction to Node js, file reading, Writing, cli and other functionality -----------------------------------

async-> writeFile(), readFile()
sync-> writeFileSync(), readFileSync()

const fs=require('fs');

fs.writeFile("demo.txt","this is node js fs module",()=>{
    console.log("write operation completed !");
});

console.log("after write operation completed");


const fs=require('fs');

fs.readFile("demo.txt",(error,data)=>{
    if (error) {
        console.log(error);
    } else {
        console.log(data.toString());
    }
});

console.log("after reading file");




const fs=require('fs');

fs.writeFileSync("newfile.txt","this is sync write operation");
console.log("write operation completed");
console.log("after reading file");



const fs=require('fs');

const data=fs.readFileSync('newfile.txt')
console.log(data.toString());
console.log("after reading file");




fs/promises
https://dev.to/mrm8488/from-callbacks-to-fspromises-to-handle-the-file-system-in-nodejs-56p2





Server: will take a request 
        will process the request
		will send a response to the client

networking
http protocols



   http module : to create a server 

const http=require('http');

var server=http.createServer((request,response)=>{

});

1st argument will represent request object
2nd argument will represent response object

the above callback function will be executed when there is a request on the server


127.0.0.1
localhost

127.0.0.1:6000
localhost:6000

social media 6000

ecommerce 7000
employee system 8000






const http=require('http');

var server=http.createServer((request,response)=>{
    console.log("server is processing the request...");
    response.write("hii node js server");
    response.end();
});

server.listen(7600,()=>{
    console.log("server is listening on port 7600");
});




1. pre-defined modules
   fs, http

2. custom modules / user defined modules

3. 3rd party modules / package


npm node package manager
npm cli

for installation:
npm install package-name
npm i package-name

to uninstall:
npm uninstall package-name

it is always recommended to have package.json file into any project 

.json file should only contain the json objects 


package.json file will contain details/informations related to our project:
eg: name of the project, version, description, author, license, name of dependencies

command to create package.json file
npm init 


npm i express

there are two types of installation for 3rd party packages:
1. local installation: packages providing functions, classes, variables

2. global installation: packages providing cli


--------------------4th day ----------------------------------------------


